{"version":3,"sources":["screens/Loading.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","Loading","n","a","createElement","reducer","state","action","type","Object","objectSpread","episodes","payload","initialState","favourites","Store","React","createContext","StoreProvider","props","_React$useReducer","useReducer","_React$useReducer2","slicedToArray","dispatch","react_default","Provider","value","children","RouterApp","lazy","Promise","all","e","then","bind","App","react_router_dom","Suspense","fallback","isLocalhost","Boolean","window","location","hostname","match","_callee2","config","regenerator_default","wrap","_context2","prev","next","requestNotificationPermission","addEventListener","swUrl","concat","process","checkValidServiceWorker","navigator","serviceWorker","ready","console","log","registerValidSW","stop","register","registration","onupdatefound","installingWorker","installing","sendNotification","onstatechange","asyncToGenerator","mark","_callee","updating","updateMessage","installedMessage","_context","controller","onUpdate","onSuccess","catch","error","_callee3","_context3","check","abrupt","Notification","requestPermission","sent","localStorage","getItem","setItem","alert","_callee4","message","_context4","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","ReactDOM","render","src_App","document","getElementById","_x","_register","apply","this","arguments"],"mappings":"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","file":"static/js/main.57c21977.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Loading = (\r\n    <div>\r\n        Loading Page\r\n    </div>\r\n)\r\n\r\nexport default Loading;","export function reducer(state, action){\r\n    switch(action.type){\r\n        case 'FETCH_DATA':\r\n            return { ...state, episodes: action.payload }\r\n        default:\r\n            return state; \r\n    }\r\n}","import React from 'react';\r\nimport { reducer } from './reducers';\r\n\r\n\r\nconst initialState = {\r\n    episodes: [],\r\n    favourites: []\r\n};\r\n\r\nexport const Store = React.createContext(initialState);\r\n\r\n// TODO: Check functionality\r\n// TODO: Implement Asynchronisity\r\nexport function StoreProvider(props){\r\n\r\n    const [ state, dispatch ] = React.useReducer(reducer, initialState);\r\n\r\n    return(\r\n        <Store.Provider value={{ state, dispatch }} >\r\n            {props.children}\r\n        </Store.Provider>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { StoreProvider } from './store';\r\nimport './index.css'\r\nimport Loading from './screens/Loading';\r\n// import RouterApp from './router';\r\n\r\nconst RouterApp = React.lazy(() => import('./router'));\r\n\r\nfunction App() {\r\n  return (\r\n    <StoreProvider>\r\n      <Router>\r\n        <React.Suspense fallback={Loading} >\r\n          <RouterApp />\r\n        </React.Suspense>\r\n      </Router>\r\n    </StoreProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport async function register(config) {\r\n  await requestNotificationPermission();\r\n\r\n  if (process.env.NODE_ENV !== 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        sendNotification('App is being cached localyy for offline purpose!')\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = async () => {\r\n          if (installingWorker.state === 'installed') {\r\n            let updating = false, \r\n              updateMessage='New version of app is installed',\r\n              installedMessage = 'Your app is installed and works offline'\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n                updating=true\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                //Display Notification\r\n                await sendNotification(updating ? updateMessage : installedMessage);\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nasync function requestNotificationPermission(){\r\n  if(!check()) return false;\r\n  const permission = await window.Notification.requestPermission();\r\n  if(permission !== 'granted'){} //alert('Enable notifications to have great experience!');\r\n  else {\r\n    if(!localStorage.getItem('firstnotify')){\r\n      await sendNotification('Ohoo.. your first notification 🎉🙌');\r\n      localStorage.setItem('firstnotify',true);\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction check(){\r\n\r\n  if (!('serviceWorker' in navigator)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n  if (!('PushManager' in window)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function sendNotification(message){\r\n  check() ? await new Notification(message) : await requestNotificationPermission();\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\nwindow.addEventListener('online',e => {\r\n  sendNotification('Lost internet connection !')\r\n})\r\n\r\nwindow.addEventListener('offline',e => {\r\n  sendNotification('Network connection restored !')\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}