{"version":3,"sources":["hooks/GraphqlHook.js","config.js","context/NetworkContext.js","utils/index.js","context/GlobalContext.js","queries/productListing.js","context/FilterOptionsContext.js","context/CartContext.js","queries/cart.js","context/index.js","context/ProductDetailContext.js","screens/Loading.js","queries/productdetail.js","App.js","serviceWorker.js","index.js"],"names":["useGraphql","query","mapper","variables","arguments","length","undefined","_React$useState","React","useState","_React$useState2","Object","D_Jayasoorya_Nac_Ecom_nac_ecom_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","loading","setLoading","_React$useState3","_React$useState4","error","setError","_React$useState5","_React$useState6","data","setData","_React$useState7","_React$useState8","mappedData","setMappedData","_React$useContext$Net","useContext","NetworkContext","NetworkCtx","uri","graphqlUrl","cdnUrl","client","createApolloFetch","makeRequest","then","resdata","mapped","console","catch","err","useEffect","__webpack_require__","d","__webpack_exports__","API_URL","HOME_PAGE_URL","CDN_URL","initialCtx","apiUrl","token","homePage","concat","LoginCtx","email","password","setNetworkCtx","createContext","NetworkProvider","Consumer","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Provider","value","children","resolutions","res","size","filterGenerator","type","table","clause","D_Jayasoorya_Nac_Ecom_nac_ecom_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","some","GLobalCtx","loggedIn","setGlobaCtx","GlobalContext","GlobalProvider","slicedToArray","Globalctx","setGlobalCtx","react_default","conditions","filters","filter","map","val","String","keys","k","fquery","fc","filterProductMatrix","values","objectSpread","FilterOptionsContext","FilterOptionsCtx","Offers","Availability","ProductType","style","material","Theme","Collection","metalColor","MetalPurity","Occasion","NoOfStones","Gender","stoneColor","stoneShape","setFilters","filterData","FilterOptionsProvider","withRouter","queries","fk","fv","qt","push","encodeURI","join","history","pathname","search","window","location","pathQueries","paramsArrayOfObject","decodeURI","replace","split","splitval","defineProperty","log","_useGraphql","CartCtx","cartFilters","skuId","setCartFilters","CartContext","CartProvider","skus","localStorage","getItem","id","JSON","parse","products","sku_id","productList","GlobalContext_GlobalProvider","ProductDetailContext","ProductDetailCtx","productId","defaultVariants","diamondType","purity","ProductDetailProvider","productDetailProps","state","defaultVariant","conditionfilter","PRODUCTDETAILS","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Loading","className","outerTheme","createMuiTheme","require","outerThemes","responsiveFontSizes","RouterApp","lazy","Promise","all","e","bind","App","context","ThemeProvider","theme","react_router_dom","Suspense","fallback","isLocalhost","Boolean","hostname","match","_callee2","config","regenerator_default","wrap","_context2","prev","next","requestNotificationPermission","addEventListener","swUrl","process","checkValidServiceWorker","navigator","serviceWorker","ready","registerValidSW","stop","register","registration","onupdatefound","installingWorker","installing","sendNotification","onstatechange","asyncToGenerator","mark","_callee","updating","updateMessage","installedMessage","_context","controller","onUpdate","onSuccess","_callee3","_context3","check","abrupt","Notification","requestPermission","sent","setItem","alert","_callee4","message","_context4","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","ReactDOM","render","src_App","document","getElementById","_x","_register","apply","this"],"mappings":"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","file":"static/js/main.7a165c08.chunk.js","sourcesContent":["import React from 'react';\r\nimport { createApolloFetch } from 'apollo-fetch';\r\nimport { NetworkContext } from 'context/NetworkContext';\r\n\r\nexport const useGraphql = (query, mapper, variables = {}) => {\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [error, setError] = React.useState(false);\r\n    const [data, setData] = React.useState({});\r\n    const [mappedData, setMappedData] = React.useState({});\r\n    const { NetworkCtx: { graphqlUrl: uri, cdnUrl } } = React.useContext(NetworkContext);\r\n    const client = createApolloFetch({ uri });\r\n\r\n    const makeRequest = () => {\r\n        client({ query, variables }).then(resdata => {\r\n            setLoading(false);\r\n            setError(false);\r\n            setData(resdata);\r\n            if (mapper && data) {\r\n                try {\r\n                    let mapped = mapper(data,cdnUrl);\r\n                    setMappedData(mapped);\r\n                } catch (error) {\r\n                    console.error('MAPPER ERROR', error);\r\n                    setError(true);\r\n                    setMappedData({});\r\n                }\r\n            }\r\n\r\n        }).catch(err => {\r\n            setLoading(false);\r\n            setError(true);\r\n            setData([]);\r\n            setMappedData([]);\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        (() => {\r\n            makeRequest();\r\n        })()\r\n    }, []);\r\nreturn { error, loading, data, mappedData, makeRequest }\r\n}","export const API_URL = \"http://auth-dev.ap-south-1.elasticbeanstalk.com\"\r\nexport const HOME_PAGE_URL = \"\"\r\nexport const CDN_URL = \"https://s3.ap-south-1.amazonaws.com/staging-assets.stylori.com/base_images/\"","import React from 'react';\r\nimport { API_URL, HOME_PAGE_URL , CDN_URL} from '../config';\r\n\r\nconst initialCtx = {\r\n    NetworkCtx: {\r\n        apiUrl: API_URL, token: null, homePage: HOME_PAGE_URL, graphqlUrl: `${API_URL}/graphql`, cdnUrl: CDN_URL, LoginCtx:{email:'',password:''}\r\n    },\r\n    \r\n    setNetworkCtx: () => null\r\n}\r\n\r\nexport const NetworkContext = React.createContext(initialCtx);\r\n\r\nexport const NetworkConsumer = NetworkContext.Consumer;\r\n\r\nexport const NetworkProvider = (props) => {\r\n\r\n    const [NetworkCtx, setNetworkCtx] = React.useState(initialCtx.NetworkCtx);\r\n\r\n    return (\r\n        <NetworkContext.Provider value={{ NetworkCtx, setNetworkCtx }} >\r\n            {props.children}\r\n        </NetworkContext.Provider>\r\n    )\r\n};","export const resolutions = [\r\n  { res: '318x318', size: '375w' },\r\n  { res: '372x372', size: '500w' },\r\n  { res: '276x276', size: '1440w' },\r\n  { res: '422x422', size: '600w' },\r\n  { res: '247x247', size: '768w' },\r\n  { res: '204x204', size: '1024w' },\r\n  { res: '543x543', size: '2560w' },\r\n]\r\n\r\n\r\n// export const detailFilterGen = (type, value, table, clause = \"equalTo\") => {\r\n//   if (type === 'productId') {\r\n//     return {\r\n//       [type]: {\r\n//         [clause]: value\r\n//       }\r\n//     }\r\n//   }\r\n//   else {\r\n    \r\n//       let values = {};\r\n//   // Object.keys(kv).map(k => {\r\n//     values[type] = { [clause]: value } \r\n//   // });\r\n// console.log(values)\r\n//   return values;\r\n//   }\r\n// }\r\n\r\nexport const filterGenerator = (type, value, table, clause = \"equalTo\") => {\r\n  if (table.length > 0) {\r\n    return {\r\n      [table]: {\r\n        some: {\r\n          [type]: {\r\n            [clause]: value\r\n          },\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n  else {\r\n    return {\r\n      [type]: {\r\n        [clause]: value\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nconst initialCtx = {\r\n    GLobalCtx: {\r\n        loggedIn: false,\r\n    },\r\n\r\n    setGlobaCtx: () => null\r\n}\r\n\r\n\r\nexport const GlobalContext = React.createContext(initialCtx);\r\n\r\nexport const GlobalConsumer = GlobalContext.Consumer;\r\n\r\nexport const GlobalProvider = (props) => {\r\n\r\n    const [Globalctx, setGlobalCtx] = React.useState(initialCtx.GLobalCtx);\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{ Globalctx, setGlobalCtx }} >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import { filterGenerator } from \"utils\";\r\n\r\nexport const PRODUCTLIST = `query fetchProductDetails($filter: ProductListFilter) {\r\n  allProductLists(filter: $filter, last: 200, orderBy: PRIMARY_KEY_DESC,condition: {isactive: true} ) {\r\n    nodes {\r\n      productName\r\n      productId\r\n      defaultSize\r\n      sizeVarient\r\n      productType\r\n      productDiamondsByProductSku {\r\n        nodes {\r\n          diamondClarity\r\n          diamondColour\r\n          diamondType\r\n          stoneWeight\r\n          diamondShape\r\n          diamondSettings\r\n          stoneCount\r\n        }\r\n      }\r\n      transSkuListsByProductId (condition: {isdefault: true}) {\r\n        nodes {\r\n          skuSize\r\n          purity\r\n          diamondType\r\n          metalColor\r\n          markupPrice\r\n          sellingPrice\r\n          discountPrice\r\n          generatedSku\r\n        }\r\n      }\r\n      productImagesByProductId {\r\n        nodes {\r\n          ishover\r\n          imageUrl\r\n          imagePosition\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\nexport const filterProductMatrix = (type, value) => {\r\n  let fc = { table: \"\", type: \"\" }\r\n  switch (type) {\r\n    case \"Collection\": {\r\n      fc = {\r\n        table: \"productCollectionsByProductId\",\r\n        type: \"collectionName\"\r\n      }\r\n      break;\r\n    }\r\n    case \"Occasion\": {\r\n      fc = {\r\n        table: \"productOccassionsByProductId\",\r\n        type: \"occassionName\"\r\n      }\r\n      break;\r\n    }\r\n    case \"Theme\": {\r\n      fc = {\r\n        table: \"productThemesByProductId\",\r\n        type: \"themeName\"\r\n      }\r\n      break;\r\n    }\r\n    case \"Style\": {\r\n      fc = {\r\n        table: \"productStylesByProductId\",\r\n        type: \"styleName\"\r\n      }\r\n      break;\r\n    }\r\n    case \"ProductType\": {\r\n      fc = {\r\n        table: \"\",\r\n        type: \"productType\"\r\n      }\r\n      break;\r\n    }\r\n    case \"MetalColor\": {\r\n      fc = {\r\n        table: \"transSkuListsByProductId\",\r\n        type: \"metalColor\"\r\n      }\r\n      break;\r\n    }\r\n    case \"MetalPurity\": {\r\n      fc = {\r\n        table: \"transSkuListsByProductId\",\r\n        type: \"purity\"\r\n      }\r\n      break;\r\n    }\r\n    case \"Gender\": {\r\n      fc = {\r\n        table: \"\",\r\n        type: \"gender\"\r\n      }\r\n      break;\r\n    }\r\n\r\n    default: {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return filterGenerator(fc.type, value, fc.table);\r\n}\r\n\r\n\r\n\r\nexport const conditions = {\r\n  productId: (id) => ({\r\n    \"condition\": {\r\n      \"productId\": id,\r\n\r\n    }\r\n  }),\r\n  generateFilters: (filters) => {\r\n    let filter = {};\r\n    const filterKeys = filters.map(val => String(Object.keys(val)));\r\n\r\n    filters.map(k => {\r\n      const fkey = String(Object.keys(k));\r\n      const fval = String(Object.values(k));\r\n      const fquery = filterProductMatrix(fkey, fval);\r\n      filter = { ...filter, ...fquery };\r\n    })\r\n\r\n    if (Object.keys(filter).length > 0) {\r\n      return { filter };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}","import React, { useEffect } from 'react';\r\nimport { useGraphql } from 'hooks/GraphqlHook';\r\nimport { PRODUCTLIST, conditions } from 'queries/productListing';\r\nimport { withRouter } from 'react-router-dom';\r\n// import { productsPendants } from 'mappers/dummydata';\r\n// import { object } from 'prop-types';\r\n\r\n// let setFilter;\r\nconst initialCtx = {\r\n    FilterOptionsCtx: {\r\n        filters: {\r\n            Offers: null, Availability: null, ProductType: null, style: null, material: null, Theme: null, Collection: null, metalColor: null,\r\n            MetalPurity: null, Occasion: null, NoOfStones: null, Gender: null, stoneColor: null, stoneShape: null\r\n        },\r\n        loading: false, error: false, data: []\r\n    },\r\n    setFilters: (filterData) => { }\r\n}\r\n\r\nexport const FilterOptionsContext = React.createContext(initialCtx);\r\nexport const FilterOptionsConsumer = FilterOptionsContext.Consumer;\r\n\r\nconst Provider = (props) => {\r\n    const [filters, setFilters] = React.useState({\r\n        Offers: {}, Availability: {}, ProductType: {}, style: {}, material: {}, Theme: {}, Collection: {}, metalColor: {},\r\n        MetalPurity: {}, Occasion: {}, NoOfStones: {}, Gender: {}, stoneColor: {}, stoneShape: {}\r\n    });\r\n\r\n\r\n\r\n    var offers = [];\r\n    var queries = []\r\n    const pathQueries = () => {\r\n        // var queries = []\r\n        Object.keys(filters).map(fk => {\r\n            const filter = filters[fk];\r\n            const fv = Object.keys(filter);\r\n            if (fv.length > 0) {\r\n                // console.info('filter[fk[0]]', filter[fv[0]], filter, fv)\r\n                if (filter[fv[0]]) {\r\n                    const qt = `${fk}=${fv[0]}`;\r\n                    queries.push(qt);\r\n                }\r\n\r\n            }\r\n        })\r\n        // console.info('queries', queries);\r\n        const query = encodeURI(queries.join(\"&\"));\r\n        // console.info('QUERYIES', query);\r\n        props.history.push({\r\n            pathname: '/stylori',\r\n            search: query !== '' ? query : window.location.search,\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // console.info('FILTERSS', window.location.search);\r\n        pathQueries()\r\n    }, [filters])\r\n\r\n\r\n    // console.log('queries', props.location.search)\r\n\r\n    // Destructuring the query parameters from the URL\r\n    let paramsArrayOfObject = [];\r\n    if (window.location.search) {\r\n\r\n        let urlSearchparamsDecode = decodeURI(window.location.search);\r\n        let urlParams = urlSearchparamsDecode.replace('?', '').split('&');\r\n        let urlSplitparamsEqual = urlParams.map(val => {\r\n            let splitval = val.split('=');\r\n            return { [splitval[0]]: splitval[1] }\r\n        })\r\n        paramsArrayOfObject = urlSplitparamsEqual;\r\n        console.log('val',paramsArrayOfObject)\r\n\r\n    }\r\n\r\n\r\n    const variables = conditions.generateFilters(paramsArrayOfObject);\r\n\r\n    // console.log('variables', variables);\r\n    const { loading, error, data } = useGraphql(PRODUCTLIST, () => { }, variables);\r\n    const FilterOptionsCtx = {\r\n        filters, loading, error, data, setFilters\r\n    }\r\n\r\n\r\n    return (\r\n        <FilterOptionsContext.Provider value={{ FilterOptionsCtx, setFilters }} >\r\n            {props.children}\r\n        </FilterOptionsContext.Provider>\r\n    )\r\n};\r\n\r\nexport const FilterOptionsProvider = withRouter(Provider);","import React, { useEffect } from 'react';\r\nimport { useGraphql } from 'hooks/GraphqlHook';\r\nimport { CART } from 'queries/cart';\r\nimport { withRouter } from 'react-router-dom';\r\n// import { productsPendants } from 'mappers/dummydata';\r\n// import { object } from 'prop-types';\r\n\r\n// let setFilter;\r\nconst initialCtx = {\r\n    CartCtx: {\r\n        cartFilters: {\r\n           skuId:''\r\n        },\r\n        loading: false, error: false, data: []\r\n    },\r\n    setCartFilters: (filterData) => { }\r\n}\r\n\r\nexport const CartContext = React.createContext(initialCtx);\r\nexport const CartConsumer = CartContext.Consumer;\r\n\r\nconst Provider = (props) => {\r\n    const [cartFilters, setCartFilters] = React.useState(initialCtx.CartCtx);\r\n\r\n\r\n\r\n    var skuId;\r\n    var skus;\r\n    const pathQueries = () => {\r\n    skuId = localStorage.getItem('cartDetails')\r\n    var id = JSON.parse(skuId);\r\n     skus = id.products[0].sku_id[0];\r\n    // alert(skuId)\r\n    }\r\n    skuId = localStorage.getItem('cartDetails')\r\n    var id = JSON.parse(skuId);\r\n     skus = id.products[0].sku_id[0];\r\n\r\n    useEffect(() => {\r\n        pathQueries()\r\n    }, [cartFilters])\r\n\r\n\r\n\r\n    const variables = {\"productList\":[skus]};\r\n\r\n    // console.log('variables', variables);\r\n    const { loading, error, data } = useGraphql(CART, () => { }, variables);\r\n    const CartCtx = {\r\n        cartFilters, loading, error, data, setCartFilters\r\n    }\r\n\r\n\r\n    return (\r\n        <CartContext.Provider value={{ CartCtx, setCartFilters }} >\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n};\r\n\r\nexport const CartProvider = withRouter(Provider);","export const CART = `query MyQuery($productList: [String!]) {\r\n    allProductLists(filter: {transSkuListsByProductId: {some: {generatedSku: {in: $productList}}}}) {\r\n      nodes {\r\n        productName\r\n        productId\r\n        transSkuListsByProductId {\r\n          nodes {\r\n            generatedSku\r\n            purity\r\n            metalColor\r\n            discountPrice\r\n            markupPrice\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }`","export * from './GlobalContext';\r\nexport * from './NetworkContext';\r\nexport * from './ProductDetailContext';\r\nexport * from './FilterOptionsContext';\r\nexport * from './CartContext';","import React, { useEffect } from 'react';\r\nimport { useGraphql } from 'hooks/GraphqlHook';\r\nimport { PRODUCTDETAILS, conditions } from 'queries/productdetail';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst initialCtx = {\r\n    ProductDetailCtx: {\r\n\r\n        filters: { productId: '', defaultVariants: { diamondType: '', metalColor: '', purity: ''} },\r\n        loading: false, error: false, data: []\r\n    },\r\n    setFilters: () => { }\r\n}\r\n\r\nexport const ProductDetailContext = React.createContext(initialCtx);\r\n\r\nexport const ProductDetailConsumer = ProductDetailContext.Consumer;\r\n\r\nexport const TabsProvider = (props) => {\r\n    const [filters, setFilters] = React.useState(initialCtx.ProductDetailCtx.filters);\r\n\r\n    let queries = [];\r\n    const pathQueries = () => {\r\n\r\n\r\n        setFilters(filters)\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n        let a = props;\r\n\r\n        pathQueries()\r\n    }, [filters])\r\n\r\n\r\n    if (filters.productId === \"\") {\r\n        let productDetailProps = props.location.state;\r\n        let productId = productDetailProps.productId;\r\n        let defaultVariants = productDetailProps.defaultVariant;\r\n        filters['productId'] = productId;\r\n        filters['defaultVariants'] = defaultVariants\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFilters(filters)\r\n        pathQueries()\r\n    }, [filters])\r\n    const variables = { 'conditionfilter': filters.defaultVariants, 'filter': { \"productId\": filters.productId } }\r\n    // {\r\n    //     \"conditionfilter\": {\"diamondType\": \"SI GH\",\"purity\":\"18K\",\"metalColor\": \"White\" },\r\n    //     \"filter\": {\"productId\": \"SB0010\"}\r\n    //   }\r\n    const { loading, error, data } = useGraphql(PRODUCTDETAILS, () => { }, variables);\r\n    const ProductDetailCtx = {\r\n        filters, loading, error, data\r\n    }\r\n\r\n\r\n    return (\r\n        <ProductDetailContext.Provider value={{ ProductDetailCtx, setFilters }} >\r\n            {props.children}\r\n        </ProductDetailContext.Provider>\r\n    )\r\n};\r\nexport const ProductDetailProvider = withRouter(TabsProvider);\r\n","import React from 'react';\r\nimport './screens.css'\r\n\r\nexport const Loading = (\r\n    <div className=\"overall-loader\">\r\n        <div id=\"loading\"></div>\r\n    </div>\r\n)\r\n\r\nexport default Loading;","import { filterGenerator } from \"utils\";\r\n// SR3261\r\nexport const PRODUCTDETAILS = `query fetchProductDetails($conditionfilter:TransSkuListCondition,$filter: ProductListCondition) {\r\n  allProductLists(condition:$filter ) {\r\n    nodes {\r\n      productName\r\n      productId\r\n      defaultSize\r\n      sizeVarient\r\n      colourVarient\r\n      defaultWeight\r\n      productType\r\n      productImagesByProductId (condition: {isdefault: true}) {\r\n        nodes {\r\n          ishover\r\n          imageUrl\r\n          imagePosition\r\n        }\r\n      }\r\n      productDiamondsByProductSku {\r\n        nodes {\r\n          diamondClarity\r\n          diamondColour\r\n          diamondType\r\n          stoneWeight\r\n          diamondShape\r\n          diamondSettings\r\n          stoneCount\r\n        }\r\n      }\r\n      transSkuListsByProductId (condition:$conditionfilter ) {\r\n        nodes {\r\n          skuSize\r\n          markupPrice\r\n          sellingPrice\r\n          purity\r\n          metalColor\r\n          discountPrice\r\n          generatedSku\r\n          transSkuDescriptionsBySkuId {\r\n            nodes {\r\n              skuDescription\r\n            }\r\n          }\r\n          diamondType\r\n        }\r\n      }\r\n      productGemstonesByProductSku {\r\n        nodes {\r\n          gemstoneType\r\n          gemstoneSize\r\n          gemstoneShape\r\n          gemstoneSetting\r\n          productSku\r\n          stoneCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n`\r\nexport const filterProductMatrix = (type, value) => {\r\n  let fc = { table: \"\", type: \"\" }\r\n  switch (type) {\r\n    case \"productId\": {\r\n      fc = {\r\n        table: \"\",\r\n        type: \"productId\"\r\n      }\r\n      break;\r\n    }\r\n    case \"sizeVarient\": {\r\n      fc = {\r\n        table: \"\",\r\n        type: \"sizeVarient\"\r\n      }\r\n      break;\r\n    }\r\n    case \"metalColor\": {\r\n      fc = {\r\n        table: \"transSkuListsByProductId\",\r\n        type: \"metalColor\"\r\n      }\r\n      break;\r\n    }\r\n    case \"diamondType\": {\r\n      fc = {\r\n        table: \"productDiamondsByProductSku\",\r\n        type: \"diamondType\"\r\n      }\r\n      break;\r\n    }\r\n\r\n\r\n    default: {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return filterGenerator(fc.type, value, fc.table);\r\n}\r\n\r\nexport const conditions = {\r\n  productId: (id) => ({\r\n    \"condition\": {\r\n      \"productId\": id\r\n    }\r\n  }),\r\n\r\n\r\n  generateFilters: (filters) => {\r\n    let filter = {};\r\n    const filterKeys = filters.map(val => val);\r\n\r\n    filterKeys.map(k => {\r\n      const fk = String(Object.keys(k));\r\n      const fval = String(Object.values(k));\r\n      const fquery = filterProductMatrix(fk, fval);\r\n      filter = { ...filter, ...fquery };\r\n    })\r\n\r\n    if (Object.keys(filter).length > 0) {\r\n      return { filter };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { NetworkProvider, GlobalProvider } from 'context';\r\nimport './index.css'\r\nimport Loading from 'screens/Loading';\r\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nlet outerTheme = createMuiTheme(require('./theme.json'));\r\nlet outerThemes = responsiveFontSizes(outerTheme);\r\nconst RouterApp = React.lazy(() => import('router'));  \r\n\r\n\r\n// const client = new ApolloClient({\r\n//   uri: ``,\r\n// });\r\n\r\n\r\n\r\nfunction App(props) {\r\n\r\n\r\n  // const productId = props.location.state.data\r\n\r\n  return (\r\n    // <ApolloProvider client={client}>\r\n    <GlobalProvider>\r\n      <ThemeProvider theme={outerThemes}>\r\n        <NetworkProvider>\r\n           {/*productId=\"SP1135\" <ProductDetailProvider productId=\"SP1135\">*/ }\r\n          <Router>\r\n            <React.Suspense fallback={Loading} >\r\n              <RouterApp />\r\n            </React.Suspense>\r\n          </Router>\r\n          {/* </ProductDetailProvider> */}\r\n        </NetworkProvider>\r\n      </ThemeProvider>\r\n    </GlobalProvider>\r\n    // </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport async function register(config) {\r\n  await requestNotificationPermission();\r\n\r\n  if (process.env.NODE_ENV !== 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        sendNotification('App is being cached localyy for offline purpose!')\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = async () => {\r\n          if (installingWorker.state === 'installed') {\r\n            let updating = false, \r\n              updateMessage='New version of app is installed',\r\n              installedMessage = 'Your app is installed and works offline'\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n                updating=true\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                //Display Notification\r\n                await sendNotification(updating ? updateMessage : installedMessage);\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nasync function requestNotificationPermission(){\r\n  if(!check()) return false;\r\n  const permission = await window.Notification.requestPermission();\r\n  if(permission !== 'granted'){} //alert('Enable notifications to have great experience!');\r\n  else {\r\n    if(!localStorage.getItem('firstnotify')){\r\n      await sendNotification('Ohoo.. your first notification 🎉🙌');\r\n      localStorage.setItem('firstnotify',true);\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction check(){\r\n\r\n  if (!('serviceWorker' in navigator)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n  if (!('PushManager' in window)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function sendNotification(message){\r\n  check() ? await new Notification(message) : await requestNotificationPermission();\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\nwindow.addEventListener('online',e => {\r\n  sendNotification('Lost internet connection !')\r\n})\r\n\r\nwindow.addEventListener('offline',e => {\r\n  sendNotification('Network connection restored !')\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}