{"version":3,"sources":["config.js","hooks/GraphqlHook.js","context/NetworkContext.js","context/GlobalContext.js","queries/productListing.js","context/FilterOptionsContext.js","context/index.js","queries/productdetail.js","context/ProductDetailContext.js","screens/Loading.js","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","API_URL","HOME_PAGE_URL","CDN_URL","useGraphql","query","mapper","variables","arguments","length","undefined","_React$useState","React","useState","_React$useState2","Object","D_Jayasoorya_Nac_Ecom_nac_ecom_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","loading","setLoading","_React$useState3","_React$useState4","error","setError","_React$useState5","_React$useState6","data","setData","_React$useState7","_React$useState8","mappedData","setMappedData","_React$useContext$Net","useContext","NetworkContext","NetworkCtx","uri","graphqlUrl","cdnUrl","client","createApolloFetch","makeRequest","then","resdata","mapped","console","catch","err","useEffect","initialCtx","apiUrl","token","homePage","concat","LoginCtx","email","password","setNetworkCtx","createContext","NetworkProvider","Consumer","props","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Provider","value","children","GLobalCtx","loggedIn","setGlobaCtx","GlobalContext","GlobalProvider","slicedToArray","Globalctx","setGlobalCtx","react_default","conditions","filters","condition","filterKeys","paramsArrayOfObject","map","val","keys","info","k","FilterOptionsContext","FilterOptionsCtx","Offers","Availability","ProductType","style","material","Theme","Collection","metalColor","MetalPurity","Occasion","NoOfStones","Gender","stoneColor","stoneShape","setFilters","filterData","FilterOptionsProvider","withRouter","queries","fk","filter","fv","qt","push","encodeURI","join","history","pathname","search","window","location","pathQueries","urlSearchparams","decodeURI","replace","split","obj","nameFilter","keyNameFilter","_useGraphql","GlobalContext_GlobalProvider","ProductDetailContext","PRODUCTDETAILS","productId","id","generateCondition","ProductDetailCtx","ringSize","metalPurity","diamondClarity","ProductDetailProvider","D_Jayasoorya_Nac_Ecom_nac_ecom_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","D_Jayasoorya_Nac_Ecom_nac_ecom_ui_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Loading","className","outerTheme","createMuiTheme","require","outerThemes","responsiveFontSizes","RouterApp","lazy","Promise","all","e","bind","App","context","ThemeProvider","theme","react_router_dom","Suspense","fallback","isLocalhost","Boolean","hostname","match","_callee2","config","regenerator_default","wrap","_context2","prev","next","requestNotificationPermission","addEventListener","swUrl","process","checkValidServiceWorker","navigator","serviceWorker","ready","log","registerValidSW","stop","register","registration","onupdatefound","installingWorker","installing","sendNotification","onstatechange","asyncToGenerator","mark","_callee","updating","updateMessage","installedMessage","_context","state","controller","onUpdate","onSuccess","_callee3","_context3","check","abrupt","Notification","requestPermission","sent","localStorage","getItem","setItem","alert","_callee4","message","_context4","fetch","response","contentType","headers","get","status","indexOf","unregister","reload","ReactDOM","render","src_App","document","getElementById","_x","_register","apply","this"],"mappings":"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","file":"static/js/main.7b35e79f.chunk.js","sourcesContent":["export const API_URL = \"http://auth-dev.ap-south-1.elasticbeanstalk.com\"\r\nexport const HOME_PAGE_URL = \"\"\r\nexport const CDN_URL = \"https://s3.ap-south-1.amazonaws.com/staging-assets.stylori.com/base_images/\"","import React from 'react';\r\nimport { createApolloFetch } from 'apollo-fetch';\r\nimport { NetworkContext } from 'context/NetworkContext';\r\n\r\nexport const useGraphql = (query, mapper, variables = {}) => {\r\n    const [loading, setLoading] = React.useState(true);\r\n    const [error, setError] = React.useState(false);\r\n    const [data, setData] = React.useState({});\r\n    const [mappedData, setMappedData] = React.useState({});\r\n    const { NetworkCtx: { graphqlUrl: uri, cdnUrl } } = React.useContext(NetworkContext);\r\n    const client = createApolloFetch({ uri });\r\n\r\n    const makeRequest = () => {\r\n        client({ query, variables }).then(resdata => {\r\n            setLoading(false);\r\n            setError(false);\r\n            setData(resdata);\r\n            if (mapper && data) {\r\n                try {\r\n                    let mapped = mapper(data,cdnUrl);\r\n                    setMappedData(mapped);\r\n                } catch (error) {\r\n                    console.error('MAPPER ERROR', error);\r\n                    setError(true);\r\n                    setMappedData({});\r\n                }\r\n            }\r\n\r\n        }).catch(err => {\r\n            setLoading(false);\r\n            setError(true);\r\n            setData([]);\r\n            setMappedData([]);\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        (() => {\r\n            makeRequest();\r\n        })()\r\n    }, []);\r\nreturn { error, loading, data, mappedData, makeRequest }\r\n}","import React from 'react';\r\nimport { API_URL, HOME_PAGE_URL , CDN_URL} from '../config';\r\n\r\nconst initialCtx = {\r\n    NetworkCtx: {\r\n        apiUrl: API_URL, token: null, homePage: HOME_PAGE_URL, graphqlUrl: `${API_URL}/graphql`, cdnUrl: CDN_URL, LoginCtx:{email:'',password:''}\r\n    },\r\n    \r\n    setNetworkCtx: () => null\r\n}\r\n\r\nexport const NetworkContext = React.createContext(initialCtx);\r\n\r\nexport const NetworkConsumer = NetworkContext.Consumer;\r\n\r\nexport const NetworkProvider = (props) => {\r\n\r\n    const [NetworkCtx, setNetworkCtx] = React.useState(initialCtx.NetworkCtx);\r\n\r\n    return (\r\n        <NetworkContext.Provider value={{ NetworkCtx, setNetworkCtx }} >\r\n            {props.children}\r\n        </NetworkContext.Provider>\r\n    )\r\n};","import React from 'react';\r\n\r\nconst initialCtx = {\r\n    GLobalCtx: {\r\n        loggedIn: false,\r\n    },\r\n\r\n    setGlobaCtx: () => null\r\n}\r\n\r\n\r\nexport const GlobalContext = React.createContext(initialCtx);\r\n\r\nexport const GlobalConsumer = GlobalContext.Consumer;\r\n\r\nexport const GlobalProvider = (props) => {\r\n\r\n    const [Globalctx, setGlobalCtx] = React.useState(initialCtx.GLobalCtx);\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{ Globalctx, setGlobalCtx }} >\r\n            {props.children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","\r\nexport const PRODUCTLIST = `query fetchProductDetails($condition: ProductListCondition) {\r\n  allProductLists(condition: $condition, first:17) {\r\n    nodes {\r\n      productName\r\n      productId\r\n      defaultSize\r\n      sizeVarient\r\n      productType\r\n      productDiamondsByProductSku {\r\n        nodes {\r\n          diamondClarity\r\n          diamondColour\r\n          diamondType\r\n          stoneWeight\r\n          diamondShape\r\n          diamondSettings\r\n          stoneCount\r\n        }\r\n      }\r\n      transSkuListsByProductId {\r\n        nodes {\r\n          skuSize\r\n          purity\r\n          markupPrice\r\n          sellingPrice\r\n          discountPrice\r\n        }\r\n      }\r\n      productImagesByProductId {\r\n        nodes {\r\n          ishover\r\n          imageUrl\r\n          imagePosition\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n\r\n\r\nexport const conditions = {\r\n  productId: (id) => ({\r\n    \"condition\": {\r\n      \"productId\": id,\r\n\r\n    }\r\n  }),\r\n  generateCondition: (filters) => {\r\n    // console.log(PRODUCTLIST)\r\n    let condition = {};\r\n    // const filterKeys = Object.values(filters);\r\n    const filterKeys = filters.paramsArrayOfObject.map(val => Object.keys(val))\r\n    debugger\r\n    console.info('filterKeys', filterKeys, filters);\r\n    filterKeys.map(k => {\r\n      switch (k) {\r\n        case \"productId\":\r\n          condition[\"productId\"] = filters[k];\r\n\r\n          break;\r\n        case \"Collection\":\r\n          condition[\"Collection\"] = `productCollectionsByProductId(condition: {collectionName: \"Loops\"}) {\r\n              nodes {\r\n                collectionName\r\n              }\r\n            }`\r\n          break;\r\n        default: {\r\n\r\n        }\r\n      }\r\n    })\r\n    return condition;\r\n\r\n  }\r\n}","import React, { useEffect } from 'react';\r\nimport { useGraphql } from 'hooks/GraphqlHook';\r\nimport { PRODUCTLIST, conditions } from 'queries/productListing';\r\nimport { withRouter } from 'react-router-dom';\r\n// import { productsPendants } from 'mappers/dummydata';\r\n// import { object } from 'prop-types';\r\n\r\n// let setFilter;\r\nconst initialCtx = {\r\n    FilterOptionsCtx: {\r\n        filters: {\r\n            Offers: null, Availability: null, ProductType: null, style: null, material: null, Theme: null, Collection: null, metalColor: null,\r\n            MetalPurity: null, Occasion: null, NoOfStones: null, Gender: null, stoneColor: null, stoneShape: null\r\n        },\r\n        loading: false, error: false, data: []\r\n    },\r\n    setFilters: (filterData) => { }\r\n}\r\n\r\nexport const FilterOptionsContext = React.createContext(initialCtx);\r\n\r\nexport const FilterOptionsConsumer = FilterOptionsContext.Consumer;\r\n\r\nconst Provider = (props) => {\r\n    const [filters, setFilters] = React.useState({\r\n        Offers: {}, Availability: {}, ProductType: {}, style: {}, material: {}, Theme: {}, Collection: {}, metalColor: {},\r\n        MetalPurity: {}, Occasion: {}, NoOfStones: {}, Gender: {}, stoneColor: {}, stoneShape: {}\r\n    });\r\n\r\n   \r\n\r\n    var offers = [];\r\n    var queries = []\r\n    const pathQueries = () => {\r\n        // var queries = []\r\n        Object.keys(filters).map(fk => {\r\n            const filter = filters[fk];\r\n            const fv = Object.keys(filter);\r\n            if (fv.length > 0) {\r\n                // console.info('filter[fk[0]]', filter[fv[0]], filter, fv)\r\n                if (filter[fv[0]]) {\r\n                    const qt = `${fk}=${fv[0]}`;\r\n                    queries.push(qt);\r\n                }\r\n\r\n            }\r\n        })\r\n        // console.info('queries', queries);\r\n        const query = encodeURI(queries.join(\"&\"));\r\n        // console.info('QUERYIES', query);\r\n        props.history.push({\r\n            pathname: '/stylori',\r\n            search: query !== '' ? query : window.location.search,\r\n        })\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        // console.info('FILTERSS', window.location.search);\r\n        pathQueries()\r\n    }, [filters])\r\n  \r\n\r\n    // console.log('queries', props.location.search)\r\n\r\n// Destructuring the query parameters from the URL\r\nlet paramsArrayOfObject = [];\r\nif(window.location.search)\r\n{\r\n  let urlSearchparams = window.location.search;\r\n\r\n  let urlSearchparamsDecode = decodeURI(urlSearchparams)\r\n\r\n  let urlSearchparamsReplace = urlSearchparamsDecode.replace('?', '')\r\n\r\n  let urlSearchparamsSplitAmpersand = urlSearchparamsReplace.split('&')\r\n  \r\n  let urlSplitparamsEqual = () => urlSearchparamsSplitAmpersand.map(val =>{ return val.split('=')})\r\n  // let \r\n  let mapUrlParamsSplitEqual = urlSplitparamsEqual();\r\n\r\n\r\n  let paramsMapUrlSetState = () => mapUrlParamsSplitEqual.map(val=>\r\n    \r\n    {\r\n        let obj ={};\r\n      var nameFilter = val[0]\r\n      var keyNameFilter = val[1]\r\n      obj[nameFilter]=keyNameFilter\r\n      paramsArrayOfObject.push(obj)\r\n    //   console.log('val',mapUrlParamsSplitEqual)\r\n    \r\n    }\r\n    )\r\n    paramsMapUrlSetState()\r\n    // console.log('val',paramsArrayOfObject)\r\n  \r\n}\r\n\r\n\r\n    const variables = {\r\n        \r\n        condition: conditions.generateCondition({ paramsArrayOfObject })\r\n    };\r\n    \r\n    // console.log('variables', variables);\r\n    const { loading, error, data } = useGraphql(PRODUCTLIST, () => { }, variables);\r\n    const FilterOptionsCtx = {\r\n        filters, loading, error, data, setFilters\r\n    }\r\n\r\n\r\n    return (\r\n        <FilterOptionsContext.Provider value={{ FilterOptionsCtx, setFilters }} >\r\n            {props.children}\r\n        </FilterOptionsContext.Provider>\r\n    )\r\n};\r\n\r\nexport const FilterOptionsProvider = withRouter(Provider);","export * from './GlobalContext';\r\nexport * from './NetworkContext';\r\nexport * from './ProductDetailContext';\r\nexport * from './FilterOptionsContext'","export const PRODUCTDETAILS = `query fetchProductDetails($condition: ProductListCondition) {\r\n  allProductLists(condition: $condition, first: 20) {\r\n    nodes {\r\n      productName\r\n      productId\r\n      defaultSize\r\n      sizeVarient\r\n      colourVarient\r\n      defaultWeight\r\n      productType\r\n      productImagesByProductId {\r\n        nodes {\r\n          ishover\r\n          imageUrl\r\n          imagePosition\r\n        }\r\n      }\r\n      productDiamondsByProductSku {\r\n        nodes {\r\n          diamondClarity\r\n          diamondColour\r\n          diamondType\r\n          stoneWeight\r\n          diamondShape\r\n          diamondSettings\r\n          stoneCount\r\n        }\r\n      }\r\n      transSkuListsByProductId(condition: {isdefault: true}) {\r\n        nodes {\r\n          skuSize\r\n          markupPrice\r\n          sellingPrice\r\n          purity\r\n          metalColor\r\n            transSkuDescriptionsBySkuId {\r\n            nodes {\r\n              skuDescription\r\n            }\r\n          }\r\n        }\r\n      }\r\n      productGemstonesByProductSku {\r\n        nodes {\r\n          gemstoneType\r\n          gemstoneSize\r\n          gemstoneShape\r\n          gemstoneSetting\r\n          productSku\r\n          stoneCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`\r\n// query fetchProductDetails($condition: ProductListCondition) {\r\n//   allProductLists(condition: $condition) {\r\n//     nodes {\r\n//       productName\r\n//       productId\r\n//       productDiamondsByProductSku {\r\n//         nodes {\r\n//           diamondClarity\r\n//           diamondColour\r\n//           diamondType\r\n//         }\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\nexport const conditions = {\r\n\r\n  productId: (id) => ({\r\n    \"condition\": {\r\n      \"productId\": id\r\n\r\n    }\r\n\r\n  }),\r\n\r\n  generateCondition: (filters) => {\r\n\r\n    let condition = {};\r\n    const filterKeys = Object.keys(filters);\r\n    filterKeys.map(k => {\r\n      switch (k) {\r\n        case \"productId\":\r\n          condition[\"productId\"] = filters[k];\r\n          break;\r\n        default: {\r\n\r\n        }\r\n      }\r\n    })\r\n    return condition;\r\n  }\r\n}","import React, { useEffect } from 'react';\r\nimport { useGraphql } from 'hooks/GraphqlHook';\r\nimport { PRODUCTDETAILS, conditions } from 'queries/productdetail';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst initialCtx = {\r\n    ProductDetailCtx: {\r\n        filters: { ringSize: null, metalPurity: null, diamondClarity: null },\r\n        loading: false, error: false, data: []\r\n    },\r\n    setFilters: () => { }\r\n}\r\n\r\nexport const ProductDetailContext = React.createContext(initialCtx);\r\n\r\nexport const ProductDetailConsumer = ProductDetailContext.Consumer;\r\n\r\nexport const TabsProvider = (props) => {\r\n    const { productId } = props;\r\n    debugger\r\n    const [filters, setFilters] = React.useState({\r\n        ringSize: '',\r\n        metalPurity: '',\r\n        diamondClarity: '',\r\n    });\r\n\r\n    var tabsFilter = [];\r\n    const pathQueries = () => {\r\n        let queries = [];\r\n        queries.push(filters);\r\n        const url = encodeURI(queries);\r\n        // props.history.push({\r\n        //     pathname: '/pricingPage',\r\n        //     search: url,\r\n        // })\r\n    };\r\n    useEffect(() => {\r\n        pathQueries()\r\n    }, [filters])\r\n\r\n\r\n\r\n\r\n    const variables = {\r\n        condition: conditions.generateCondition({ ...filters, productId })\r\n    };\r\n    const { loading, error, data } = useGraphql(PRODUCTDETAILS, () => { }, variables);\r\n    const ProductDetailCtx = {\r\n        filters, loading, error, data\r\n    }\r\n\r\n    return (\r\n        <ProductDetailContext.Provider value={{ ProductDetailCtx, setFilters }} >\r\n            {props.children}\r\n        </ProductDetailContext.Provider>\r\n    )\r\n};\r\nexport const ProductDetailProvider = withRouter(TabsProvider);\r\n","import React from 'react';\r\nimport './screens.css'\r\n\r\nexport const Loading = (\r\n    <div className=\"overall-loader\">\r\n        <div id=\"loading\"></div>\r\n    </div>\r\n)\r\n\r\nexport default Loading;","import React from 'react';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport { NetworkProvider, GlobalProvider } from 'context';\r\nimport './index.css'\r\nimport Loading from 'screens/Loading';\r\nimport { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nlet outerTheme = createMuiTheme(require('./theme.json'));\r\nlet outerThemes = responsiveFontSizes(outerTheme);\r\nconst RouterApp = React.lazy(() => import('router'));  \r\n\r\n\r\n// const client = new ApolloClient({\r\n//   uri: ``,\r\n// });\r\n\r\n\r\n\r\nfunction App(props) {\r\n\r\n\r\n  // const productId = props.location.state.data\r\n\r\n  return (\r\n    // <ApolloProvider client={client}>\r\n    <GlobalProvider>\r\n      <ThemeProvider theme={outerThemes}>\r\n        <NetworkProvider>\r\n           {/*productId=\"SP1135\" <ProductDetailProvider productId=\"SP1135\">*/ }\r\n          <Router>\r\n            <React.Suspense fallback={Loading} >\r\n              <RouterApp />\r\n            </React.Suspense>\r\n          </Router>\r\n          {/* </ProductDetailProvider> */}\r\n        </NetworkProvider>\r\n      </ThemeProvider>\r\n    </GlobalProvider>\r\n    // </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport async function register(config) {\r\n  await requestNotificationPermission();\r\n\r\n  if (process.env.NODE_ENV !== 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        sendNotification('App is being cached localyy for offline purpose!')\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = async () => {\r\n          if (installingWorker.state === 'installed') {\r\n            let updating = false, \r\n              updateMessage='New version of app is installed',\r\n              installedMessage = 'Your app is installed and works offline'\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n                updating=true\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                //Display Notification\r\n                await sendNotification(updating ? updateMessage : installedMessage);\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nasync function requestNotificationPermission(){\r\n  if(!check()) return false;\r\n  const permission = await window.Notification.requestPermission();\r\n  if(permission !== 'granted'){} //alert('Enable notifications to have great experience!');\r\n  else {\r\n    if(!localStorage.getItem('firstnotify')){\r\n      await sendNotification('Ohoo.. your first notification 🎉🙌');\r\n      localStorage.setItem('firstnotify',true);\r\n    }\r\n    return true;\r\n  };\r\n}\r\n\r\nfunction check(){\r\n\r\n  if (!('serviceWorker' in navigator)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n  if (!('PushManager' in window)) {\r\n    alert('Sorry notifications are not yet supported');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nasync function sendNotification(message){\r\n  check() ? await new Notification(message) : await requestNotificationPermission();\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n\r\nwindow.addEventListener('online',e => {\r\n  sendNotification('Lost internet connection !')\r\n})\r\n\r\nwindow.addEventListener('offline',e => {\r\n  sendNotification('Network connection restored !')\r\n})","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}